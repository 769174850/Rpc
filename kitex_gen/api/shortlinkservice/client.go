// Code generated by Kitex v0.9.1. DO NOT EDIT.

package shortlinkservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	api "newRpc/kitex_gen/api"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GenerateShortLink(ctx context.Context, req *api.GenerateShortLinkRequest, callOptions ...callopt.Option) (r *api.GenerateShortLinkResponse, err error)
	DeleteShortLink(ctx context.Context, req *api.DeleteShortLinkRequest, callOptions ...callopt.Option) (r *api.DeleteShortLinkResponse, err error)
	UpdateShortLink(ctx context.Context, req *api.UpdateShortLinkRequest, callOptions ...callopt.Option) (r *api.UpdateShortLinkResponse, err error)
	GetUserShortLinks(ctx context.Context, req *api.GetUserShortLinksRequest, callOptions ...callopt.Option) (r []*api.Url, err error)
	GetShortLinkRankings(ctx context.Context, req *api.GetShortLinkRankingsRequest, callOptions ...callopt.Option) (r []*api.Url, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kShortLinkServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kShortLinkServiceClient struct {
	*kClient
}

func (p *kShortLinkServiceClient) GenerateShortLink(ctx context.Context, req *api.GenerateShortLinkRequest, callOptions ...callopt.Option) (r *api.GenerateShortLinkResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GenerateShortLink(ctx, req)
}

func (p *kShortLinkServiceClient) DeleteShortLink(ctx context.Context, req *api.DeleteShortLinkRequest, callOptions ...callopt.Option) (r *api.DeleteShortLinkResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteShortLink(ctx, req)
}

func (p *kShortLinkServiceClient) UpdateShortLink(ctx context.Context, req *api.UpdateShortLinkRequest, callOptions ...callopt.Option) (r *api.UpdateShortLinkResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateShortLink(ctx, req)
}

func (p *kShortLinkServiceClient) GetUserShortLinks(ctx context.Context, req *api.GetUserShortLinksRequest, callOptions ...callopt.Option) (r []*api.Url, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserShortLinks(ctx, req)
}

func (p *kShortLinkServiceClient) GetShortLinkRankings(ctx context.Context, req *api.GetShortLinkRankingsRequest, callOptions ...callopt.Option) (r []*api.Url, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetShortLinkRankings(ctx, req)
}
